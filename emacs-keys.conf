# %f   the highlighted file
# %d   the path of the current directory
# %s   the selected files in the current directory
# %t   all tagged files in the current directory
# %c   the full paths of the currently copied/cut files
# %p   the full paths of selected files

# ===================================================================
# == Command Aliases in the Console
# ===================================================================

alias e		 edit
alias q    	 quit
alias q!    	 quit!
alias qa    	 quitall
alias qa!   	 quitall!
alias qall  	 quitall
alias qall! 	 quitall!
alias setl  	 setlocal

alias filter     scout -prt
alias find       scout -aeit
alias mark       scout -mr
alias unmark     scout -Mr
alias search     scout -rs
alias search_inc scout -rts
alias travel     scout -aefiklst

# ===================================================================
# == Define keys for the browser
# ===================================================================

map ^ help

# Basic
map xcs quit
map xco quit!

map xcc quitall
map xck quitall!
map xce exit

map xR reload_cwd
map xF set freeze_files!

map <C-l> redraw_window
map <C-g> chain abort; change_mode normal; mark_files all=True val=False

map <C-h> help

map xx console
map xh<any> chain echo console history::prev N comand; console; eval fm.ui.console.history_move(-%any)
map xhl chain echo console history::last comand; console; eval fm.ui.console.history_move(-1)
map xss chain echo shell::shell; console shell%%space
map xsna chain echo shell::name start in shell; console -p6 shell '%f'
map xsNa chain echo shell::names start in shell; console -p6 shell %s
map xsne chain echo shell::name end in shell; console shell '%f'
map xsNe chain echo shell::names end in shell; console shell %s

# Searching
map <C-s> search_next
map <C-r> search_next forward=False
map ss chain echo search::search <incoming>; console find%%space
map st chain echo search::serch <typing>; console search%%space
map si chain echo search::serch <coming>; console search_inc%%space

map sot chain echo search oder::oder tag; search_next order=tag
map sos chain echo search oder::oder size; search_next order=size
map soi chain echo search oder::oder mimetype; search_next order=mimetype
map soc chain echo search oder::oder ctime; search_next order=ctime
map som chain echo search oder::oder mtime; search_next order=mtime
map soa chain echo search oder::oder atime; search_next order=atime

map sgg chain echo grep::grep <string> in selected...; console grep%%space
map sgn chain echo grep::grep name in selected...; console grep %f
map sgN chain echo grep::grep names in selected...; console grep %s

# Change the line mode
map xlf chain echo linemode::; linemode filename
map xli chain echo linemode::; linemode fileinfo
map xlm chain echo linemode::; linemode mtime
map xlp chain echo linemode::; linemode permissions
map xls chain echo linemode::; linemode sizemtime
map xlt chain echo linemode::; linemode metatitle

# Tagging / Marking
map htt<any> chain echo marking::tag toggle <CHR>; tag_toggle tag=%any
map htr chain echo marking::tag remove; tag_remove
map <Space> mark_files toggle=True
map <C-Space> toggle_visual_mode
map <A-Space> toggle_visual_mode reverse=True
map ha chain echo marking::mark all; mark_files all=True val=True
map hh chain echo marking::mark toggle all; mark_files all=True toggle=True
map hu chain echo marking::ummark all; mark_files all=True val=False

# For the nostalgics: Midnight Commander bindings
map <F1> help
map <F3> display_file
map <F4> edit
map <F5> copy
map <F6> cut
map <F7> console mkdir%space
map <F8> console delete
map <F10> exit

# Direction keys
map <UP> move up=1
map <DOWN> move down=1
map <LEFT> move left=1
map <RIGHT> move right=1
map <HOME> move to=0
map <END> move to=-1
map <PAGEDOWN> move down=1   pages=True
map <PAGEUP> move up=1     pages=True
map <CR> move right=1
map <INSERT> console touch%space

# emacs direction
copymap <UP> <C-p>
copymap <DOWN> <C-n>
copymap <LEFT> <C-b>
copymap <RIGHT> <C-f>
copymap <HOME> <A-LT>
copymap <END> <A-GT>
copymap <PAGEDOWN> <C-v>
copymap <PAGEUP> <A-v>

# uni direction
copymap <UP> u
copymap <DOWN> j
copymap <LEFT> i
copymap <RIGHT> k
copymap <HOME> I
copymap <END> K
copymap <PAGEDOWN> J
copymap <PAGEUP> U

# Jumping around
map <C-u><C-space> history_go -1
map <A-}> move_parent 1
map <A-{> move_parent -1

map ghh chain echo going homing::home; cd ~
map ghd chain echo going homing::documents; cd ~/Документы
map ghl chain echo going homing::loads; cd ~/Загрузки
map ghv chain echo going homing::video; cd ~/Видео
map ghp chain echo going homing::picture; cd ~/Изображения
map ghs chain echo going homing::music; cd ~/Музыка
map ght chain echo going homing::templates; cd ~/Шаблоны
map ghw chain echo going homing::desktop; cd ~/Рабочий стол
map ghe chain echo going homing::temporary; cd ~/Временное

map gg chain echo going::cd <in>; console cd%%space
map ge chain echo going::/etc; cd /etc
map gu chain echo going::/usr; cd /usr
map gd chain echo going::/dev; cd /dev
map gl chain echo going::in link; cd -r .
map gL chain echo going::to link; cd -r %f
map go chain echo going::/opt; cd /opt
map gv chain echo going::/var; cd /var
map gm chain echo going::/media; cd /media
map gM chain echo going::/mnt; cd /mnt
map gs chain echo going::/srv; cd /srv
map gt chain echo going::/tmp; cd /tmp
map g/ chain echo going::/; cd /
map gR chain echo going::RANGER_DIR; eval fm.cd(ranger.RANGERDIR)
map gr chain echo going::RANGER_USR; cd ~/.config/ranger
map g? chain echo going::RANGER_DOC; cd /usr/share/doc/ranger

# edit
map ee edit

#open
map ot chain echo opening::open terminal; terminal
map of chain echo opening::open file; display_file
map ol chain echo opening::open log; display_log
map oT chain echo opening::open tasks; taskview_open

# Filesystem Operations
#open
map oo chain echo opening::open with; draw_possible_programs; console open_with%space 0
eval for (sk,s,k,d) in ((sk,s,k,d) for (sk,s) in zip("oO",("","sudo ")) for (k,d) in zip("ujmhdvelstp",("..","'%f'",".","~","~/Документы","~/Видео","~/Временное","~/Загрузки","~/Музыка","~/Шаблоны","~/Изображения"))): cmd("map {sk}e{k} chain echo {s}opening emacs from::open emacs from {d}; console shell {s}emacs {d}/".format(sk=sk,s=s,k=k,d=d))

#delete
map fdd chain echo deleting::delete; execute_console delete
map fdD chain echo deleting::delete in console; console delete
map fDd chain echo sudo deleting::sudo delete; shell sudo rm -Ivrd '%f'
map fDD chain echo sudo deleting::sudo delete selected; shell sudo rm -Ivrd %s

#making file
map fmfe chain echo making file::make <file> empty; console touch%%space
map fMfe chain echo sudo making file::sudo <make> file empty; console shell sudo touch%%space

map fmft chain echo making file::make file txt; eval fm.open_console("shell cp -iv ~/'Шаблоны/Текстовый файл.txt' ./'Текстовый файл.txt'", position=61)
map fMft chain echo sudo making file::sudo make file txt; eval fm.open_console("shell sudo cp -iv ~/'Шаблоны/Текстовый файл.txt' ./'Текстовый файл.txt'", position=66)

map fmfp chain echo making file::make file python; eval fm.open_console("shell cp -iv ~/'Шаблоны/Файл python3.py' ./'Файл python3.py'", position=56)
map fMfp chain echo sudo making file::sudo make file python; eval fm.open_console("shell sudo cp -iv ~/'Шаблоны/Файл python3.py' ./'Файл python3.py'", position=61)

map fmfo chain echo making file::make file odt; eval fm.open_console("shell cp -iv ~/'Шаблоны/Офис документ.odt' ./'Офис документ.odt'", position=59)
map fMfo chain echo sudo making file::sudo make file odt; eval fm.open_console("shell sudo cp -iv ~/'Шаблоны/Офис документ.odt' ./'Офис документ.odt'", position=64)

#make directory
map fmd chain echo making directory::make <directory>; console mkdir%%space
map fMd chain echo sudo making directory::sudo make <directory>; console shell sudo mkdir%%space

#rename
map frr chain echo renaming::renaming with new <name>; console rename%%space
map fRr chain echo sudo renaming::sudo renaming with new <name>; console shell sudo mv -n --strip-trailing-slashes %f%%space

map frn chain echo renaming::renaming with append to name; rename_append
map fRn chain echo sudo renaming::sudo renaming with append to name; eval fm.open_console("shell sudo mv -n --strip-trailing-slashes '%f' '%f'", position=42+2*len(fm.thisfile.basename)-len(fm.thisfile.extension))

map fre chain echo renaming::renaming in ending name; eval fm.open_console("rename '%f'")
map frE chain echo renaming::renaming in ending names; eval fm.open_console("rename %s")
map fRe chain echo sudo renaming::sudo renaming in ending name; eval fm.open_console("shell sudo mv -n --strip-trailing-slashes '%f' '%f'")

map fra chain echo renaming::renaming in starting name; eval fm.open_console("rename '%f'", position=7)
map frA chain echo renaming::renaming in starting names; eval fm.open_console("rename %s", position=7)
map fRa chain echo sudo renaming::sudo renaming in starting name; eval fm.open_console('shell sudo mv -n --strip-trailing-slashes %f %f', position=42+len(fm.thisfile.basename)+1)

#make link s ##paste_symlink(relative=False)
eval for (sk,s,k,d,f) in ((sk,s,k,d,f) for (sk,s) in zip("mM",("","sudo ")) for f in ("fs") for (k,d) in zip("ujmhdvelstp",("..","'%f'",".","~","~/Документы","~/Видео","~/Временное","~/Загрузки","~/Музыка","~/Шаблоны","~/Изображения"))): cmd("map f{sk}l{k} chain echo {s}making link::make {sel}to {d}; console shell {s}ln -s {f} {d}/{f}".format(sk=sk,s=s,k=k if f=='f' else k.upper(),d=d,f="'%f'" if f=='f' else "%"+f, sel="" if f=='f' else "selected "))

#transfering
eval for (sk,s,k,d,f) in ((sk,s,k,d,f) for (sk,s) in zip("tT",("","sudo ")) for f in ("fs") for (k,d) in zip("ujhdvelstp",("..","'%f'","~","~/Документы","~/Видео","~/Временное","~/Загрузки","~/Музыка","~/Шаблоны","~/Изображения"))): cmd("map f{sk}{k} chain echo {s}transfering::transfer {sel}to {d}; console shell {s}mv -i {f} {d}".format(sk=sk,s=s,k=k if f=='f' else k.upper(),d=d,f="'%f'" if f=='f' else "%"+f, sel="" if f=='f' else "selected "))

#copy
eval for (sk,s,k,d,f) in ((sk,s,k,d,f) for (sk,s) in zip("cC",("","sudo ")) for f in ("fs") for (k,d) in zip("ujmhdvelstp",("..","'%f'",".","~","~/Документы","~/Видео","~/Временное","~/Загрузки","~/Музыка","~/Шаблоны","~/Изображения"))): cmd("map f{sk}{k} chain echo {s}copying::copy {sel}to {d}; console shell {s}cp -iv {f} {d}".format(sk=sk,s=s,k=k if f=='f' else k.upper(),d=d,f="'%f'" if f=='f' else "%"+f, sel="" if f=='f' else "selected "))

#alteration(bg)
#image
map faiig chain echo alteration(bg) image::on dmg 2 img; shell dmg2img -s '%f' &

map faiif chain echo alteration(bg) image::on mdf 2 iso; shell mdf2iso %s &

map faiid chain echo alteration(bg) image::on ccd 2 iso; eval fm.execute_console("shell ccd2iso '%f' '" + fm.thisfile.basename[:-fm.thisfile.extension] + "iso'")

map faiir chain echo alteration(bg) image::on nrg 2 iso; eval fm.execute_console("shell nrg2iso '%f' '" + fm.thisfile.basename[:-fm.thisfile.extension] + "iso'")

#office
map faooc chain echo alteration(bg) office::on doc 2 odt; shell unoconv -f odt '%f' &
map faooC chain echo alteration(bg) office::on doc 2 odt; shell unoconv -f odt %s &

map faopc chain echo alteration(bg) office::on doc[x], od(t|p|s), pp(s|t|tx), xls[x] 2 pdf; shell unoconv -f pdf '%f' &
map faopC chain echo alteration(bg) office::on doc[x], od(t|p|s), pp(s|t|tx), xls[x] 2 pdf; shell unoconv -f pdf %s &

map faotx chain echo alteration(bg) office::on docx 2 txt; shell docx2txt '%f' &

map faoto chain echo alteration(bg) office::on odt 2 txt; shell odt2txt '%f' &
map faotO chain echo alteration(bg) office::on odt 2 txt; shell odt2txt %s &

map faodt chain echo alteration(bg) office::on odt 2 doc; shell odt2doc '%f' &
map faodT chain echo alteration(bg) office::on odt 2 doc; shell odt2doc %s &

map faoht chain echo alteration(bg) office::on odt 2 html; shell odt2html '%f' &
map faohT chain echo alteration(bg) office::on odt 2 html; shell odt2html %s &

#picture
map fapxe chain echo alteration(bg) picture::on Picture 2 xpm; eval fm.execute_console("shell convert '%f' '" + fm.thisfile.basename[:-fm.thisfile.extension] + "xpm' &")
map fapxE chain echo alteration(bg) picture::on Picture 2 xpm; eval fm.execute_console("shell convert %s '" + fm.thisfile.basename[:-fm.thisfile.extension] + "xpm' &")

map fapsf chain echo alteration(bg) picture::on pdf 2 svg; eval fm.execute_console("shell pdf2svg '%f' '" + fm.thisfile.basename[:-fm.thisfile.extension] + "svg' &")

map fapsF chain echo alteration(bg) picture::on pdf 2 svg <page no>; eval fm.open_console("shell pdf2svg '%f' '" + fm.thisfile.basename[:-len(fm.thisfile.extension)] + "xpm'  &", position=19+2*len(fm.thisfile.basename)-len(fm.thisfile.extension))

# Generate all the chmod bindings with some python help:
eval for arg in "rwxXst": cmd("map f+u{0} chain echo chmod u+::u+{0}; shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map f+g{0} chain echo chmod g+::g+{0}; shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map f+o{0} chain echo chmod o+::o+{0}; shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map f+a{0} chain echo chmod a+::a+{0}; shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map f+{0}  chain echo chmod +::+{0}; shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map f-u{0} chain echo chmod u-::u-{0}; shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map f-g{0} chain echo chmod g-::g-{0}; shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map f-o{0} chain echo chmod o-::o-{0}; shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map f-a{0} chain echo chmod a-::a-{0}; shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map f-{0}  chain echo chmod -::-{0}; shell -f chmod u-{0} %s".format(arg))

map f= chain echo sudo chmod::sudo chmod <oct>; eval fm.open_console("shell sudo chmod -fR  %s", position=21)

#archiving
#tar.gz
map atgc chain echo archiving(bg) tar.gz::on tar.gz concatenate selected archives; shell tar -Azf '%f' %s &
map atgm chain echo archiving(bg) tar.gz::make archive; eval fm.execute_console("shell tar -czpf '" + fm.thisfile.basename[:-len(fm.thisfile.extension)] + "tar.gz' %s &")
map atgd chain echo archiving(bg) tar.gz::on tar.gz diff selected archives; shell tar -dzf '%f' %s
map atga chain echo archiving(bg) tar.gz::on tar.gz add selected files; shell tar -r '%f' %s &
map atgD chain echo archiving(bg) tar.gz::on tar.gz delete selected files; shell tar --delete '%f' %s &
map atgx chain echo archiving(bg) tar.gz::on tar.gz extract files; shell tar -xzf '%f' &

#mount
map mim chain echo sudo mounting::on iso, mount iso to /mnt; shell sudo mkdir -p /mnt/'%f'; shell sudo mount -o loop -t udf,iso9660 '%f' /mnt/'%f'
map mum chain echo sudo mounting::on iso, ummount iso from /mnt; shell sudo umount /mnt/'%f'; shell sudo rmdir /mnt/'%f'
map mic chain echo sudo mounting::on iso, mount iso to /cdrom; shell sudo mount -o loop -t udf,iso9660 '%f' /media/cdrom
map muc chain echo sudo mounting::unmount /cdrom; shell sudo umount -f /media/cdrom

#coppy, cut, paste
map <C-y>y paste
map <C-y>o paste overwrite=True
map <C-y>a paste append=True
map <C-y>c paste overwrite=True append=True
map <C-y>l paste_symlink relative=False
map <C-y>L paste_symlink relative=True
map <C-y>h paste_hardlink
map <C-y>H paste_hardlinked_subtree

map <C-w>w cut
map <C-w>u uncut
map <C-w>a cut mode=add
map <C-w>r cut mode=remove
map <C-w>t cut mode=toggle

map <A-w>w copy
map <C-w>a copy mode=add
map <C-w>r copy mode=remove
map <C-w>t copy mode=toggle

map <A-w>p yank path
map <A-w>d yank dir
map <A-w>n yank name
map <A-w>. yank name_without_extension

# Temporary workarounds#
#map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)#
#map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)#
#map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)#
#map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)#
#map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)#
#map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)#
#map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)#
#map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)#

# Tabs
map tn chain echo tabbing::go tab next; tab_move 1
map tp chain echo tabbing::go tab prev; tab_move -1
map ta chain echo tabbing::go tab first; tab_move -1000
map te chain echo tabbing::go tab last; tab_move 1000
map tm chain echo tabbing::make tab .; tab_new .
map tj chain echo tabbing::make tab >; eval fm.tab_new(%p)
map tu chain echo tabbing::make tab <; tab_new ..
map tc chain echo tabbing::close current tab; tab_close
map tr chain echo tabbing::restore tab; tab_restore
map tf chain echo tabbing::move tab next; tab_shift 1
map tb chain echo tabbing::move tab prev; tab_shift -1
eval for (k,d) in zip("mhdvelstp",(".","~","~/Документы","~/Видео","~/Временное","~/Загрузки","~/Музыка","~/Шаблоны","~/Изображения")): cmd("map to{k} chain echo tabbing::new tab {d}; tab_new {d}".format(k=k,d=d))
map <A-1> tab_open 1
map <A-2> tab_open 2
map <A-3> tab_open 3
map <A-4> tab_open 4
map <A-5> tab_open 5
map ` tab_move -1000
map <A-0> tab_move 1000
map - tab_move -1
map = tab_move 1
map _ tab_shift -1
map + tab_shift 1

# Sorting
map xSs chain echo sortings::size; chain set sort=size; set sort_reverse=False
map xSb chain echo sortings::name; chain set sort=basename; set sort_reverse=False
map xSn chain echo sortings::natural; chain set sort=natural; set sort_reverse=False
map xSm chain echo sortings::mtime; chain set sort=mtime; set sort_reverse=False
map xSc chain echo sortings::ctime; chain set sort=ctime; set sort_reverse=False
map xSa chain echo sortings::atime; chain set sort=atime; set sort_reverse=False
map xSt chain echo sortings::type; chain set sort=type; set sort_reverse=False
map xSe chain echo sortings::extension; chain set sort=extension; set sort_reverse=False

map xSS chain echo sortings::size reverse; chain set sort=size; set sort_reverse=True
map xSB chain echo sortings::name reverse; chain set sort=basename; set sort_reverse=True
map xSN chain echo sortings::natural reverse; chain set sort=natural; set sort_reverse=True
map xSM chain echo sortings::mtime reverse; chain set sort=mtime; set sort_reverse=True
map xSC chain echo sortings::ctime reverse; chain set sort=ctime; set sort_reverse=True
map xSA chain echo sortings::stime reverse; chain set sort=atime; set sort_reverse=True
map xST chain echo sortings::type reverse; chain set sort=type; set sort_reverse=True
map xSE chain echo sortings::extension reverse; chain set sort=extension; set sort_reverse=True

#info
map xis chain echo info::; get_cumulative_size
map xidu chain echo info::du --max-depth=1 -h --apparent-size; shell -p du --max-depth=1 -h --apparent-size
map xidU chain echo info::du --max-depth=1 -h --apparent-size | sort -rh; shell -p du --max-depth=1 -h --apparent-size | sort -rh
map xiwp chain echo info::shell -f echo -n '%d/%f'; shell -f echo -n '%d/%f' | xsel -i; xsel -o | xsel -i -b
map xiwd chain echo info::shell -f echo -n '%d'; shell -f echo -n '%d' | xsel -i; xsel -o | xsel -i -b
map xiwn chain echo info::shell -f echo -n '%f'; shell -f echo -n '%f' | xsel -i; xsel -o | xsel -i -b

# Settings
map zc chain echo options::shrink column empty preview; toggle_option collapse_preview
map zd chain echo options::sort directories first; toggle_option sort_directories_first
map zh chain echo options::show hidden files; toggle_option show_hidden
map zi chain echo options::flush input on press key; toggle_option flushinput
map zP chain echo options::preview images; toggle_option preview_images
map zm chain echo options::enable mouse; toggle_option mouse_enabled
map zF chain echo options::preview files; toggle_option preview_files
map zD chain echo options::preview directories; toggle_option preview_directories
map zsi chain echo sorting options::sort case insensitive; toggle_option sort_case_insensitive
map zsr chain echo sorting options::sort reverse; toggle_option sort_reverse
map zsd chain echo sorting options::set sort random; set sort=random
map zu chain echo options::autoupdate cumulative size; toggle_option autoupdate_cumulative_size
map zv chain echo options::preview scripts; toggle_option use_preview_script

# Filter stack
map .n chain echo filter::filter stack add name...; console filter_stack add name%space
map .m chain echo filter::filter stack add mime...; console filter_stack add mime%space
map .d chain echo filtering::; filter_stack add type d
map .f chain echo filtering::; filter_stack add type f
map .l chain echo filtering::; filter_stack add type l
map .| chain echo filtering::; filter_stack add or
map .& chain echo filtering::; filter_stack add and
map .! chain echo filtering::; filter_stack add not
map .r chain echo filtering::filter stack rotate; execute_console filter_stack rotate
map .c chain echo filtering::; filter_stack clear
map .* chain echo filtering::; filter_stack decompose
map .p chain echo filtering::; filter_stack pop
map .. chain echo filtering::; filter_stack show
map .N chain echo filtering::filter name...; console filter%%space
map .W chain echo filtering::narrow selections; execute_console narrow

# Bookmarks
map xbm<any> chain echo bookmarks::enter <bookmark>; enter_bookmark %any
map xbs<any> chain echo bookmarks::set <bookmark>; set_bookmark %any
map xbu<any> chain echo bookmarks::unset <bookmark>; unset_bookmark %any

map xbd<bg> chain echo bookmarks::; draw_bookmarks
#copymap <C-x>bd<bg>  <C-x>bu<bg> <C-x>bs<bg>

#Repository
map xrs chain echo repository::; stage '%f'
map xrS chain echo repository::; stage %s
map xru chain echo repository::; unstage '%f'
map xrU chain echo repository::; unstage %s

# Search for letters as you type them
#eval for arg in "abcdefghijklmnopqrstuvwxyz": cmd("map {0} console search_inc {0}".format(arg))

map <allow_quantifiers> false

# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab> eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <C-g> eval fm.ui.console.close()
cmap <CR> eval fm.ui.console.execute()
cmap <C-l> redraw_window

copycmap <C-g> <esc>
#copycmap <CR> <C-j>
cunmap <C-j>

copycmap <tab> <A-f>
copycmap <s-tab> <A-b>

copycmap <tab> <A-u>
copycmap <s-tab> <A-j>

# Move around
cmap <up> eval fm.ui.console.history_move(-1)
cmap <down> eval fm.ui.console.history_move(1)
cmap <left> eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home> eval fm.ui.console.move(right=0, absolute=True)
cmap <end> eval fm.ui.console.move(right=-1, absolute=True)

# Line Editing
cmap <backspace> eval fm.ui.console.delete(-1)
cmap <delete> eval fm.ui.console.delete(0)
cmap <C-w> eval fm.ui.console.delete_word()
cmap <C-k> eval fm.ui.console.delete_rest(1)
cmap <C-u> eval fm.ui.console.delete_rest(-1)
cmap <C-y> eval fm.ui.console.paste()

# And of course the emacs way
copycmap <up>        <C-p>
copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>

# And moving the uni way
copycmap <up>        <A-u>
copycmap <down>      <A-j>
copycmap <left>      <A-i>
copycmap <right>     <A-k>
copycmap <home>      <A-o>
copycmap <end>       <A-l>
#copycmap <backspace> <C-h>
#copycmap <delete>    <C-l>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false

# ===================================================================
# == Pager Keybindings
# ===================================================================

# Movement
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True

copypmap <UP>       <A-u> <C-p>
copypmap <DOWN>     <A-n> <C-n> <CR>
copypmap <LEFT>     <A-i> <C-b>
copypmap <RIGHT>    <A-k> <C-f>
copypmap <HOME>     <A-o> <A-LT>
copypmap <END>      <A-l> <A-GT>
copypmap <PAGEUP>   <A-p> <C-B> <A-v>
copypmap <PAGEDOWN> <A-;> <C-F> <C-v> <Space>

# Basic
pmap		<C-l> redraw_window
pmap 		<C-g> pager_close
pmap 		E edit_file
copypmap 	<C-g> q

# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       u  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     I
copytmap <END>      K
copytmap <C-u>      Z
copytmap <PAGEUP>   p  b U  <C-B>
copytmap <PAGEDOWN> n  f J  <C-F>  <Space>

# Changing priority and deleting tasks
tmap <A-n>      eval -q fm.ui.taskview.task_move(-1)
tmap <A-p>      eval -q fm.ui.taskview.task_move(0)
tmap <C-d>      eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

tmap <enter>   	pause_tasks

# Basic
tmap <C-l> redraw_window
tmap <C-g> taskview_close
copytmap <C-g> q